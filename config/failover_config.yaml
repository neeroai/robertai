# Emergency Failover and Rollback Configuration for RobertAI Massive Deployment
# Comprehensive configuration for handling thousands of concurrent users

# Basic monitoring configuration
monitoring:
  health_check_interval: 15  # Seconds between health checks
  failure_threshold: 3       # Consecutive failures before marking service as failed
  recovery_threshold: 2      # Consecutive successes before marking service as recovered
  critical_service_timeout: 5.0    # Timeout for critical services
  non_critical_timeout: 10.0       # Timeout for non-critical services

# Database configuration
database:
  primary:
    host: "robertai-db-cluster.cluster-xyz.us-east-1.rds.amazonaws.com"
    port: 5432
    database: "robertai_production"
    user: "${DB_USER}"
    password: "${DB_PASSWORD}"
    max_connections: 100
    connection_timeout: 30
  
  backup:
    enabled: true
    interval_minutes: 30
    retention_days: 7
    max_snapshots: 20

# Redis configuration for caching and state management
redis:
  primary:
    host: "robertai-redis-cluster.xyz.cache.amazonaws.com"
    port: 6379
    database: 0
    password: "${REDIS_PASSWORD}"
    cluster_mode: true
  
  backup:
    host: "robertai-redis-backup.xyz.cache.amazonaws.com"
    port: 6379
    database: 0
    password: "${REDIS_PASSWORD}"

# AWS infrastructure configuration
aws:
  region: "us-east-1"
  auto_scaling_group: "robertai-massive-asg"
  load_balancer: "robertai-massive-alb"
  rds_instance: "robertai-db-cluster"
  elasticache_cluster: "robertai-redis-cluster"
  
  # Auto-scaling parameters
  scaling:
    min_instances: 5
    max_instances: 50
    target_cpu_utilization: 70
    scale_up_cooldown: 180    # 3 minutes
    scale_down_cooldown: 300  # 5 minutes
    emergency_max_instances: 100

# Rollback and snapshot configuration
rollback:
  max_snapshots: 15
  snapshot_interval: 300     # 5 minutes
  emergency_snapshot_retention: 30  # Days
  
  # Rollback procedures
  procedures:
    application:
      enabled: true
      max_rollback_versions: 5
      rollback_timeout: 300
    
    database:
      enabled: true
      backup_before_rollback: true
      rollback_timeout: 600
    
    infrastructure:
      enabled: true
      rollback_timeout: 900

# Service health check endpoints
health_checks:
  # Critical services - failure triggers immediate failover
  critical:
    - name: "load_balancer"
      endpoint: "http://localhost:8000/health/load-balancer"
      timeout: 3.0
      expected_status: 200
      check_interval: 10
      
    - name: "queue_processor"  
      endpoint: "http://localhost:8001/health"
      timeout: 5.0
      expected_status: 200
      check_interval: 15
      
    - name: "cache_system"
      endpoint: "http://localhost:8002/health"
      timeout: 3.0
      expected_status: 200
      check_interval: 10
      
    - name: "database"
      endpoint: "http://localhost:8000/health/database"
      timeout: 10.0
      expected_status: 200
      check_interval: 30
      
    - name: "whatsapp_webhook"
      endpoint: "http://localhost:8000/webhooks/whatsapp/health"
      timeout: 5.0
      expected_status: 200
      check_interval: 20

  # Non-critical services - failure triggers degradation
  non_critical:
    - name: "monitoring_dashboard"
      endpoint: "http://localhost:3000/health"
      timeout: 10.0
      expected_status: 200
      check_interval: 60
      
    - name: "analytics_service"
      endpoint: "http://localhost:8003/health"
      timeout: 15.0
      expected_status: 200
      check_interval: 120
      
    - name: "bird_api_integration"
      endpoint: "https://api.bird.com/health"
      timeout: 20.0
      expected_status: 200
      check_interval: 180

# Failover action sequences
failover_sequences:
  # Level 1: Single service failure
  single_service_failure:
    actions:
      - type: "restart_service"
        target: "${FAILED_SERVICE}"
        timeout: 120
        retry_count: 2
      
      - type: "check_dependencies"
        timeout: 60
      
      - type: "validate_recovery"
        timeout: 180

  # Level 2: Multiple service degradation  
  degraded_system:
    actions:
      - type: "enable_graceful_degradation"
        config:
          reduce_rate_limits: 0.7
          disable_non_essential: true
          increase_cache_ttl: 300
        timeout: 30
      
      - type: "scale_infrastructure"
        scale_factor: 1.3
        timeout: 300
      
      - type: "redistribute_load"
        timeout: 120

  # Level 3: Critical system failure
  critical_failure:
    actions:
      - type: "emergency_scale_up"
        min_instances: 20
        timeout: 300
      
      - type: "activate_all_backups"
        timeout: 180
      
      - type: "redirect_to_maintenance_mode"
        timeout: 60
      
      - type: "notify_emergency_contacts"
        priority: "high"
        timeout: 30

  # Level 4: Complete system emergency
  system_emergency:
    actions:
      - type: "full_emergency_response"
        timeout: 60
      
      - type: "activate_disaster_recovery"
        timeout: 600
      
      - type: "notify_all_stakeholders"
        priority: "critical"
        timeout: 30

# Graceful degradation settings
degradation:
  # Traffic management
  rate_limiting:
    normal_factor: 1.0
    degraded_factor: 0.7
    critical_factor: 0.5
    emergency_factor: 0.3
  
  # Feature disabling
  features:
    non_essential:
      - "analytics_tracking"
      - "detailed_logging" 
      - "background_sync"
    
    expensive:
      - "image_processing"
      - "video_transcription"
      - "complex_ai_analysis"
  
  # Cache optimization
  cache:
    normal_ttl: 300      # 5 minutes
    degraded_ttl: 600    # 10 minutes
    critical_ttl: 1800   # 30 minutes

# Emergency contact configuration
emergency_contacts:
  - type: "slack"
    name: "Operations Team"
    webhook_url: "${SLACK_WEBHOOK_URL}"
    channel: "#robertai-emergencies"
    severity_levels: ["critical", "emergency"]
  
  - type: "email"
    name: "Technical Lead"
    address: "tech-lead@company.com"
    severity_levels: ["critical", "emergency"]
  
  - type: "sms"
    name: "On-call Engineer"
    phone: "${ONCALL_PHONE}"
    severity_levels: ["emergency"]
  
  - type: "pagerduty"
    name: "Primary Escalation"
    integration_key: "${PAGERDUTY_KEY}"
    severity_levels: ["critical", "emergency"]

# Notification templates
notifications:
  slack:
    critical: |
      ðŸš¨ CRITICAL ALERT - RobertAI System
      Status: ${STATUS}
      Failed Services: ${FAILED_SERVICES}
      Time: ${TIMESTAMP}
      Action: ${ACTION_TAKEN}
    
    emergency: |
      ðŸ†˜ EMERGENCY - RobertAI System OFFLINE
      Status: ${STATUS} 
      Details: ${DETAILS}
      Time: ${TIMESTAMP}
      All hands on deck required!

  email:
    subject_template: "[RobertAI ALERT] ${SEVERITY} - ${EVENT_TYPE}"
    body_template: |
      RobertAI Emergency Alert
      
      Severity: ${SEVERITY}
      Event Type: ${EVENT_TYPE}
      Timestamp: ${TIMESTAMP}
      
      System Status: ${SYSTEM_STATUS}
      
      Failed Services:
      ${FAILED_SERVICES}
      
      Details:
      ${DETAILS}
      
      Actions Taken:
      ${ACTIONS_TAKEN}
      
      System Dashboard: http://monitoring.robertai.com
      Incident Response: http://wiki.company.com/incident-response

# Load balancer failover configuration
load_balancer:
  primary_endpoints:
    - "http://robertai-app-1.internal:8000"
    - "http://robertai-app-2.internal:8000"
    - "http://robertai-app-3.internal:8000"
  
  backup_endpoints:
    - "http://robertai-backup-1.internal:8000"
    - "http://robertai-backup-2.internal:8000"
  
  health_check_path: "/health"
  failover_threshold: 3
  recovery_threshold: 2
  
  # WhatsApp-specific load balancing
  whatsapp:
    primary_numbers:
      - "+1234567890"
      - "+1234567891" 
      - "+1234567892"
    
    backup_numbers:
      - "+1234567893"
      - "+1234567894"
    
    load_distribution: "consistent_hash"  # or "round_robin", "least_connections"
    rate_limit_per_number: 1000  # messages per minute

# Queue processing failover
queue_processing:
  primary_queues:
    - "messages:high_priority"
    - "messages:normal_priority"
    - "messages:low_priority"
  
  backup_queues:
    - "messages:backup:high_priority"
    - "messages:backup:normal_priority"
  
  worker_pools:
    normal_mode:
      high_priority: 50
      normal_priority: 30
      low_priority: 20
    
    degraded_mode:
      high_priority: 70
      normal_priority: 25
      low_priority: 5
    
    emergency_mode:
      high_priority: 95
      normal_priority: 5
      low_priority: 0

# Performance thresholds for triggering failover
performance_thresholds:
  response_time:
    warning_ms: 1000
    critical_ms: 3000
    emergency_ms: 5000
  
  success_rate:
    warning_percent: 95.0
    critical_percent: 90.0
    emergency_percent: 85.0
  
  throughput:
    warning_msg_per_sec: 500
    critical_msg_per_sec: 200
    emergency_msg_per_sec: 100
  
  resource_usage:
    cpu_warning_percent: 80
    cpu_critical_percent: 90
    memory_warning_percent: 85
    memory_critical_percent: 95
    disk_warning_percent: 80
    disk_critical_percent: 90

# Recovery procedures
recovery:
  # Post-failover validation
  validation:
    timeout: 300  # 5 minutes
    required_services: 
      - "load_balancer"
      - "queue_processor"
      - "database"
      - "cache_system"
    
    success_criteria:
      min_success_rate: 95.0
      max_response_time: 2000
      min_throughput: 100
  
  # Gradual traffic restoration
  traffic_restoration:
    enabled: true
    initial_percent: 10
    increment_percent: 20
    increment_interval: 120  # 2 minutes
    validation_threshold: 98.0

# Security configurations
security:
  # Emergency access
  emergency_access:
    enabled: true
    temporary_tokens: true
    token_duration: 3600  # 1 hour
    require_mfa: true
  
  # Audit logging
  audit:
    log_all_failover_actions: true
    log_retention_days: 90
    secure_storage: true
  
  # Network isolation
  network:
    isolate_failed_services: true
    emergency_firewall_rules: true

# Testing and validation
testing:
  # Chaos engineering
  chaos_testing:
    enabled: false  # Enable for testing environments only
    failure_injection_rate: 0.01  # 1% of requests
  
  # Failover testing
  failover_tests:
    scheduled: true
    frequency: "monthly"
    test_types:
      - "single_service_failure"
      - "database_failover"
      - "cache_failover"
      - "network_partition"
  
  # Load testing integration
  load_testing:
    trigger_on_failover: false  # Don't load test during real failures
    post_recovery_validation: true

# Integration with other systems
integrations:
  # Monitoring systems
  monitoring:
    prometheus:
      enabled: true
      metrics_endpoint: "/metrics"
      alert_manager_url: "http://alertmanager:9093"
    
    datadog:
      enabled: false
      api_key: "${DATADOG_API_KEY}"
  
  # Log aggregation  
  logging:
    elasticsearch:
      enabled: true
      cluster_url: "https://elasticsearch.company.com"
      index_pattern: "robertai-logs-*"
    
    cloudwatch:
      enabled: true
      log_group: "/aws/lambda/robertai"
      log_stream: "failover-logs"

# Maintenance windows
maintenance:
  # Planned maintenance
  windows:
    daily: "02:00-03:00 UTC"   # 1 hour daily maintenance window
    weekly: "SUN 01:00-04:00 UTC"  # 3 hour weekly maintenance window
  
  # During maintenance
  during_maintenance:
    disable_failover_alerts: true
    allow_extended_downtime: true
    notification_override: true

# Cost optimization
cost_optimization:
  # Auto-scaling limits during failover
  scaling_limits:
    max_cost_per_hour: 500  # USD
    emergency_max_cost: 2000  # USD for true emergencies
  
  # Resource cleanup
  cleanup:
    unused_snapshots: 7  # days
    temporary_scaling: 24  # hours
    emergency_resources: 72  # hours